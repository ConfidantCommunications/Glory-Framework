package ca.confidant.glory.controller;    //import js.Dom;	import flash.display.Sprite;	import haxe.xml.Fast;	import openfl.Assets;    import org.puremvc.haxe.patterns.command.SimpleCommand;	import org.puremvc.haxe.interfaces.INotification;//    import ca.confidant.glory.ApplicationFacade;    import ca.confidant.glory.view.PageMediator;	import ca.confidant.glory.view.ApplicationMediator;	import ca.confidant.glory.ApplicationFacade;	//import Main;//	import ca.confidant.glory.model.LoaderProxy;	import ca.confidant.glory.model.PagesConfigProxy;	import ca.confidant.glory.model.StateProxy;	import ca.confidant.glory.view.constants.ControlConstants;	import ca.confidant.glory.model.ControlsRegistryProxy;	import flash.display.DisplayObject;	import haxe.Timer;	/*	 * @author Allan Dowdeswell	 * This is triggered by any control that has a pageForward, pageBackward, or pageSkipTo action. 	 * It triggers BuildPageCommand and RemovePageCommand and updates the current page in the PageConfigProxy.	 * It also triggers transitions, DestroyPageSoundsCommand and InitPageSoundsCommand.	 */    class ChangePageCommand extends SimpleCommand    {		var pcp:PagesConfigProxy;		var sp:StateProxy;		var appMediator:ApplicationMediator;		//var csp:ControlsRegistryProxy; 		private function doTransition(id:String,type:String):Void{			//trace("doTransition")			var t:Map<String,String>=new Map();			t.set("id",id);			t.set("transitionType",type);			sendNotification(ApplicationFacade.DO_TRANSITION, t);		}        override public function execute( note:INotification ) : Void        {			trace('-------------------------'+note.getBody());			sp=cast(facade.retrieveProxy(StateProxy.NAME) , StateProxy);						if(sp.getState()==GloryState.TRANSITIONING) return;						pcp=cast(facade.retrieveProxy(PagesConfigProxy.NAME) , PagesConfigProxy);			appMediator = cast(facade.retrieveMediator(ApplicationMediator.NAME) , ApplicationMediator);			var action=cast(note.getBody(),String);//current page			var waitTimerOut:Timer;			var outPageId:String=pcp.getCurrentPage().get("id");			sp.setState(GloryState.TRANSITIONING);			switch(action){				case ControlConstants.PAGE_FORWARD:					//var current:Hash<Dynamic>=pcp.getCurrentPage();					var nextPage=pcp.getNextPage();					if (nextPage != null){						doTransition(outPageId, "out");						waitTimerOut=new Timer(pcp.getPageTransitionOutTime(outPageId)*1000);						trace("out time:"+pcp.getPageTransitionOutTime(outPageId));						waitTimerOut.run = function():Void{							waitTimerOut.stop();							sendNotification(ApplicationFacade.REMOVE_PAGE, outPageId);							sendNotification(ApplicationFacade.DESTROY_PAGE_SOUNDS, outPageId);							sendNotification(ApplicationFacade.INIT_PAGE_SOUNDS, nextPage.get("id"));							sendNotification(ApplicationFacade.BUILD_PAGE, nextPage.get("id"));							//doTransition(nextPage.get("id"), "in");							pcp.setCurrentPageById(nextPage.get("id"));							sp.setState(GloryState.READY);						}					} else {						sp.setState(GloryState.READY);					}					//floatControls();				case ControlConstants.PAGE_BACKWARD:					//var current:Hash<Dynamic>=pcp.getCurrentPage();					var prevPage=pcp.getPreviousPage();					if (prevPage != null){						doTransition(outPageId, "out");						waitTimerOut=new Timer(pcp.getPageTransitionOutTime(outPageId)*1000);						trace("out time:"+pcp.getPageTransitionOutTime(outPageId));						waitTimerOut.run = function():Void{							waitTimerOut.stop();							sendNotification(ApplicationFacade.REMOVE_PAGE, outPageId);							sendNotification(ApplicationFacade.DESTROY_PAGE_SOUNDS, outPageId);							sendNotification(ApplicationFacade.INIT_PAGE_SOUNDS, prevPage.get("id"));							sendNotification(ApplicationFacade.BUILD_PAGE, prevPage.get("id"));							//doTransition(prevPage.get("id"), "in");							pcp.setCurrentPageById(prevPage.get("id"));							sp.setState(GloryState.READY);						}					} else {						sp.setState(GloryState.READY);					}					//floatControls();				default:					// must be a skip 					var p=pcp.getPageById(action);					var overlay:Bool=p.get("type")=="overlay";																if(p != null){						//if it's an overlay, we don't remove the underlying page or change the current page						if(!overlay){							doTransition(outPageId, "out");							waitTimerOut=new Timer(pcp.getPageTransitionOutTime(outPageId)*1000);							trace("out time:"+pcp.getPageTransitionOutTime(outPageId));							waitTimerOut.run = function():Void{								waitTimerOut.stop();								sendNotification(ApplicationFacade.REMOVE_PAGE, outPageId);								sendNotification(ApplicationFacade.DESTROY_PAGE_SOUNDS, outPageId);								sendNotification(ApplicationFacade.INIT_PAGE_SOUNDS, p.get("id"));								sendNotification(ApplicationFacade.BUILD_PAGE, p.get("id"));								//doTransition(p.get("id"), "in");								pcp.setCurrentPageById(p.get("id"));								sp.setState(GloryState.READY);							}						} else {							//transition in the overlay							sendNotification(ApplicationFacade.INIT_PAGE_SOUNDS, p.get("id"));							sendNotification(ApplicationFacade.BUILD_PAGE, p.get("id"));							sp.setState(GloryState.READY);							//doTransition(p.get("id"), "in");						}											} else {						sp.setState(GloryState.READY);					}			}        }		/*private function floatControls():Void{			var crp:ControlsRegistryProxy=cast(facade.retrieveProxy(ControlsRegistryProxy.NAME),ControlsRegistryProxy);			var controls:Array<Dynamic>=crp.getControls();			//trace("controls:"+controls.length);			var i=0;			for (thisControl in controls){				//trace("control:"+appMediator.getIndex(thisControl));								//must remove and re-add for the HTML5 target to work				appMediator.removeDisplayObject(thisControl);				appMediator.addDisplayObject(thisControl);				i++;			}		}*/    }
