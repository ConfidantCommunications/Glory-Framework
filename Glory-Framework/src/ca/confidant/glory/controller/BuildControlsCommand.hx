package ca.confidant.glory.controller;    //import js.Dom;	import nme.display.Sprite;	import nme.display.Bitmap;	import nme.display.BitmapData;	import haxe.xml.Fast;	import nme.Assets;    import org.puremvc.haxe.patterns.command.SimpleCommand;	import org.puremvc.haxe.interfaces.INotification;//    import ca.confidant.glory.ApplicationFacade;    import ca.confidant.glory.view.PageMediator;	import ca.confidant.glory.view.ApplicationMediator;	//import ca.confidant.glory.MediaFrameworkApp;	import ca.confidant.glory.view.ControlComponentMediator;	import ca.confidant.glory.view.components.ControlComponent;	//import ca.confidant.glory.view.ExternalInterfaceMediator;	//import ca.confidant.glory.view.components.PeopleCarouselComponent;    //import ca.confidant.glory.controller.InitWidgetsCommand;	import ca.confidant.glory.ApplicationFacade;	//import WidgetFramework;//	import ca.confidant.glory.model.LoaderProxy;	import ca.confidant.glory.model.PagesConfigProxy;	import ca.confidant.glory.model.ControlsRegistryProxy;    class BuildControlsCommand extends SimpleCommand    {		var pcp:PagesConfigProxy;		var csp:ControlsRegistryProxy;		var appMediator:ApplicationMediator;        override public function execute( note:INotification ) : Void        {			trace("BuildControlsCommand");			pcp=cast(facade.retrieveProxy(PagesConfigProxy.NAME) , PagesConfigProxy);			csp=cast(facade.retrieveProxy(ControlsRegistryProxy.NAME) , ControlsRegistryProxy);			appMediator = cast(facade.retrieveMediator(ApplicationMediator.NAME) , ApplicationMediator);			var controlsList:List<Fast>=pcp.getAppControls();			for (thisControl in controlsList){				makeControl(thisControl);			}        }		private function makeControl(actor:Fast):Void{			try{				//trace("making control:"+actor.att.id);				var imageData:BitmapData = Assets.getBitmapData("assets/"+actor.att.src,true);				var b=new Bitmap (imageData);				var a:ControlComponent=new ControlComponent(b,Std.string(actor.att.action));				var acm = new ControlComponentMediator(actor.att.id,a);				facade.registerMediator(acm);				appMediator.addDisplayObject(a);				csp.registerControl(a);				a.x=Std.parseInt(actor.att.x);				a.y=Std.parseInt(actor.att.y);				a.width=Std.parseInt(actor.att.width);				a.height=Std.parseInt(actor.att.height);				a.mouseEnabled=true;				a.useHandCursor=true;				a.buttonMode=true;/*				if(actor.has.coloursrc){					var b2=new Bitmap(ApplicationMain.getAsset("assets/"+actor.att.coloursrc));					a.setColourImage(b2);				}*/			} catch(e:Dynamic){				trace(Std.string(e));			}		}    }