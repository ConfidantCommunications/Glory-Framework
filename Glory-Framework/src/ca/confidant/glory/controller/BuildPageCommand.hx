package ca.confidant.glory.controller;    import nme.display.Sprite;	import nme.display.Bitmap;	import nme.display.BitmapData;	import nme.display.DisplayObject;	import haxe.xml.Fast;	//import nme.Assets; //moved to loaderProxy    import org.puremvc.haxe.patterns.command.SimpleCommand;	import org.puremvc.haxe.interfaces.INotification;    import ca.confidant.glory.view.PageMediator;	import ca.confidant.glory.view.ApplicationMediator;	import ca.confidant.glory.view.ActorComponentMediator;	import ca.confidant.glory.view.components.ActorComponent;	import ca.confidant.glory.view.components.PageComponent;	import ca.confidant.glory.ApplicationFacade;	import ca.confidant.glory.model.PagesConfigProxy;	import ca.confidant.glory.model.ActorComponentConfigProxy;	import ca.confidant.glory.model.LoaderProxy;	/*	 * This is triggered first by the GotoIntroCommand, then by calls to the ChangePageCommand. 	 * It retrieves configuration information from the PageConfigProxy and puts the page together	 * with the necessary mediators.	 */    class BuildPageCommand extends SimpleCommand    {		var pcp:PagesConfigProxy;		var appMediator:ApplicationMediator;		var lp:LoaderProxy;        override public function execute( note:INotification ) : Void        {			trace('BuildPageCommand');			pcp=cast(facade.retrieveProxy(PagesConfigProxy.NAME) , PagesConfigProxy);			lp=cast(facade.retrieveProxy(LoaderProxy.NAME) , LoaderProxy);			appMediator = cast(facade.retrieveMediator(ApplicationMediator.NAME) , ApplicationMediator);			var pageId=cast(note.getBody(),String);//current page			var s:PageComponent=new PageComponent();//main page container			s.name=pageId;			if(pcp.getPageById(pageId).get("type")=="overlay"){				//trace("overlay");				appMediator.addDisplayObject(s,-1);			} else {				//trace("not overlay");				appMediator.addDisplayObject(s,0);			}						trace("page holder added: "+pageId);			var pm = new PageMediator(pageId,s);			facade.registerMediator(pm);			var actorsList=pcp.getPageActors(pageId);			trace("length:"+actorsList.length);			if (actorsList.length>0){				for (thisActor in actorsList){					trace("makeActor: "+thisActor.att.id);					s.addChild(makeActor(thisActor));					//appMediator.addDisplayObject(makeActor(thisActor),0);				}			}			        }		private function makeActor(actor:Fast):DisplayObject{			//try{				var ext:String=cast(actor.att.src,String).substr(-3);				//trace("ext:"+ext);								//trace(imageData+ " is my data");				var a:ActorComponent=new ActorComponent();								if(ext=="svg"){					var theText=lp.getText("assets/"+actor.att.src);					a.addSVG(theText);				} else {					var imageData:BitmapData = lp.getBitmapData("assets/"+actor.att.src,true);					var b=new Bitmap (imageData);					a.addBitmap(b);				}				var action:String;				if(actor.has.action){					action=Std.string(actor.att.action);				} else {					action='';				}				var accp:ActorComponentConfigProxy=new ActorComponentConfigProxy(Std.string(actor.att.type), action);				facade.registerProxy(accp);				var acm = new ActorComponentMediator(actor.att.id,a,accp);				facade.registerMediator(acm);				//appMediator.addDisplayObject(a);				a.x=Std.parseInt(actor.att.x);				a.y=Std.parseInt(actor.att.y);				a.width=Std.parseInt(actor.att.width);				a.height=Std.parseInt(actor.att.height);				a.type=actor.att.type;				a.name=actor.att.id;				/*if(actor.has.coloursrc){					var b2=new Bitmap(Assets.getBitmapData("assets/"+actor.att.coloursrc,true));					a.setColourImage(b2);				}*/				return a;			//} catch(e:Dynamic){				//trace(Std.string(e));			//}		}    }