package ca.confidant.glory.view;        import org.puremvc.as3.interfaces.*;    import org.puremvc.as3.patterns.mediator.Mediator;		import ca.confidant.glory.ApplicationFacade;  	import flash.events.*;	import flash.external.ExternalInterface;        import flash.display.Stage;    /**     * A Mediator for interacting with the External Interface. Duh.     */    public class ExternalInterfaceMediator extends Mediator implements IMediator    {       	   /**         * Constructor.          */		public static const NAME:String = "ExternalInterfaceMediator";        public function ExternalInterfaceMediator( viewComponent:Object )         {            super( NAME, viewComponent );    					/*// Retrieve reference to frequently consulted Proxies			spriteDataProxy = facade.retrieveProxy( SpriteDataProxy.NAME ) as SpriteDataProxy;			// Listen for events from the view component             app.addEventListener( HelloSprite.SPRITE_DIVIDE, onSpriteDivide );            */			ExternalInterface.call( "console.log" , "I'm here");        }        /**         * List all notifications this Mediator is interested in.         * <P>         * Automatically called by the framework when the mediator         * is registered with the view.</P>         *          * @return Array the list of Nofitication names         */        override public function listNotificationInterests():Array         {            return [             		 ApplicationFacade.CALL_EXTERNAL_FUNCTION,					 ApplicationFacade.CONSOLE_LOG                   ];        }        /**         * Handle all notifications this Mediator is interested in.         * <P>         * Called by the framework when a notification is sent that         * this mediator expressed an interest in when registered         * (see <code>listNotificationInterests</code>.</P>         *          * @param INotification a notification          */        override public function handleNotification( note:INotification ):void         {            switch ( note.getName() ) {                                case ApplicationFacade.CALL_EXTERNAL_FUNCTION:					var theCall:Object = note.getBody() as Object;					if (ExternalInterface.available) {						ExternalInterface.call(theCall.theFunction, theCall.theParameters);						//ExternalInterface.call( "console.log" , "external interface is working");					}				break;                                case ApplicationFacade.CONSOLE_LOG:					var msg:String = note.getBody() as String;					if (ExternalInterface.available) {						ExternalInterface.call( "console.log" , msg);					}				break;            }        }		        protected function get stage():Stage{            return viewComponent as Stage;        }    }