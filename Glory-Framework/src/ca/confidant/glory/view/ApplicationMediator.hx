package ca.confidant.glory.view;	//import flash.events.Event;	//import flash.events.MouseEvent;	//import br.com.stimuli.loading.BulkLoader;	//import br.com.stimuli.loading.loadingtypes.LoadingItem;	import nme.display.DisplayObject;	//import org.puremvc.as3.interfaces.*;	import org.puremvc.haxe.patterns.mediator.Mediator;	import ca.confidant.glory.GloryFrameworkApp;	import ca.confidant.glory.ApplicationFacade;	//import ca.confidant.widgets.interfaces.ISaskGovWidget;	//import ca.confidant.glory.model.ControlsRegistryProxy;	import ca.confidant.glory.model.PagesConfigProxy;	import org.puremvc.haxe.interfaces.INotification;    //import ca.confidant.glory.view.StageMediator;	import ca.confidant.glory.model.LoaderProxy;	class ApplicationMediator extends Mediator{		public static inline var NAME:String = 'ApplicationMediator';		private var loaderProxy:LoaderProxy;		private var pagesConfigProxy:PagesConfigProxy;		//private var bsp:ControlsRegistryProxy;		public function new ( viewComponent:GloryFrameworkApp ) {			super( NAME, viewComponent );			trace("ApplicationMediator!");			//bsp=cast(facade.retrieveProxy(BookStateProxy.NAME) , BookStateProxy);			//trace("bsp:"+bsp);		}		override public function listNotificationInterests():Array<String> {			return [			ApplicationFacade.MESSAGE,			//ApplicationFacade.INIT_XML_LOAD,			//ApplicationFacade.FULL_SCREEN_CHANGE,			//ApplicationFacade.SET_ACTIVE_WIDGET,			ApplicationFacade.ASSETS_LOADED,			//ApplicationFacade.PAGES_CONFIG_READY			];		}		public function addDisplayObject(d:DisplayObject,level:Int=-1):Void{			if(level==-1){				getApp().addChild(d);				trace("add at top");			} else {				getApp().addChildAt(d,level);				trace('adding to level'+level);			}			//now bring controls to front			//var controls=bsp.getControls();			//for(thisControl in controls){				//getApp().addChild(thisControl);			//}		}		public function removeDisplayObject(d:DisplayObject):Void{			getApp().removeChild(d);		}		public function reportLayers():Void{			for (i in 0...getApp().numChildren){				trace("layer:"+getApp().getChildAt(i).name+":"+i);			}		}		public function getIndex(d:DisplayObject):Int{			return getApp().getChildIndex(d);		}		override public function handleNotification( note:INotification ):Void {			switch ( note.getName() ) {				case ApplicationFacade.MESSAGE :					//trace ("whuh");					getApp().displayMessage(cast(note.getBody() , String));					////break;				//case ApplicationFacade.INIT_XML_LOAD :					//trace ("whuh");					//sm=cast(facade.retrieveMediator(StageMediator.NAME) , StageMediator);					//moveLooper();					//var xmlPath:String = cast(note.getBody() , String);					//init(xmlPath);					////break;				case ApplicationFacade.ASSETS_LOADED :					sendNotification(ApplicationFacade.INIT_WIDGETS);				//case ApplicationFacade.PAGES_CONFIG_READY :				//	pagesConfigProxy = cast(facade.retrieveMediator(PagesConfigProxy.NAME),PagesConfigProxy);					//trace("pcp1:"+pagesConfigProxy);					//loadWidgets();					//break;			}		}		/*private function init(xmlPath:String):Void {			loaderProxy = cast(facade.retrieveProxy(LoaderProxy.NAME) , LoaderProxy);			loaderProxy.loadXML(xmlPath);		}*/		private function getApp():GloryFrameworkApp {			return cast(viewComponent , GloryFrameworkApp);		}	}