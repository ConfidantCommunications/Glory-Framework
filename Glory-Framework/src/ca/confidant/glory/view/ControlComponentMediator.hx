package ca.confidant.glory.view;	import ca.confidant.glory.view.components.ControlComponent;	import ca.confidant.glory.view.constants.ControlConstants;	import org.puremvc.haxe.patterns.mediator.Mediator;	//import WidgetFramework;	import nme.events.MouseEvent;	import nme.display.Sprite;	import org.puremvc.haxe.interfaces.INotification;	import ca.confidant.glory.ApplicationFacade;	import ca.confidant.glory.model.PagesConfigProxy;/** * The ControlComponentMediator mediates between ControlComponents on a page and the framework. This is created via the BuildPageCommand and destroyed with the RemovePageCommand. * *	@param id A String used as a unique identifier. This will match the id of your control in the XML configuration. *	@param viewComponent A reference to a ControlComponent. */	class ControlComponentMediator extends Mediator {		public function new ( id:String,viewComponent:ControlComponent ) {			super( id, viewComponent );			addListeners();		}		private function addListeners():Void{			control().addEventListener(MouseEvent.CLICK,onControlClicked);			control().addEventListener(MouseEvent.MOUSE_DOWN,onMouseDown);			control().addEventListener(MouseEvent.MOUSE_UP,onMouseUp);			control().addEventListener(MouseEvent.MOUSE_OUT,onMouseUp);		}		private function onMouseDown(e:MouseEvent):Void{			var a=e.currentTarget;			switch(a.type){				case ControlConstants.PAN_RIGHT:					trace("onMouseDown");					//sendNotification(ApplicationFacade.TIMER_ENABLE,100);					sendNotification(ApplicationFacade.PAN_RIGHT);				case ControlConstants.PAN_LEFT:					//sendNotification(ApplicationFacade.TIMER_ENABLE,100);					sendNotification(ApplicationFacade.PAN_LEFT);			}		}		private function onMouseUp(e:MouseEvent):Void{			var a=e.currentTarget;			switch(a.type){				case ControlConstants.PAN_RIGHT:					trace("onMouseUp");					sendNotification(ApplicationFacade.PAN_STOP);				case ControlConstants.PAN_LEFT:					sendNotification(ApplicationFacade.PAN_STOP);			}		}		private function onControlClicked(e:MouseEvent):Void{			var a=e.currentTarget;						//here we get the information to the left of colon			var controlArray:Array<String>=cast(a.type,String).split(":");			switch(controlArray[0]){				case ControlConstants.PAGE_FORWARD:					trace("pageForward");					sendNotification(ApplicationFacade.CHANGE_PAGE, ControlConstants.PAGE_FORWARD);				case ControlConstants.PAGE_BACKWARD:					trace("pageBackward");					sendNotification(ApplicationFacade.CHANGE_PAGE, ControlConstants.PAGE_BACKWARD);				case ControlConstants.PAGE_SKIP_TO:					trace("pageSkipTo:"+controlArray[1]);					sendNotification(ApplicationFacade.CHANGE_PAGE, controlArray[1]);					//controlArray[1] is the info right of the colon in the XML				case ControlConstants.TOGGLE_MENU:					trace("toggleOptions");					sendNotification(ApplicationFacade.TOGGLE_OPTIONS);				case ControlConstants.GET_URL:					var pcp=cast(facade.retrieveProxy(PagesConfigProxy.NAME),PagesConfigProxy);					sendNotification(ApplicationFacade.HTTP_LINK, pcp.getControlHref(this.mediatorName));			}		}		private function control():ControlComponent {			return viewComponent;		}	}