package ca.confidant.glory.view;        import org.puremvc.haxe.patterns.mediator.Mediator;    import ca.confidant.glory.ApplicationFacade;    import JQuery;	import js.Dom;    //import ca.confidant.glory.model.WidgetsStateProxy;	import org.puremvc.haxe.interfaces.INotification;        /**     * A Mediator for interacting with the Stage.     */    class DocumentMediator extends Mediator    {        // Cannonical name of the Mediator        public static inline var NAME:String = 'DocumentMediator';		//private var widgetsStateProxy:WidgetsStateProxy;		private var document:js.Document;        /**         * Constructor.          */        public function new( viewComponent:js.Document )         {            // pass the viewComponent to the superclass where             // it will be stored in the inherited viewComponent property            super( NAME, viewComponent );    			document=viewComponent;			// Retrieve reference to frequently consulted Proxies			//spriteDataProxy = facade.retrieveProxy( SpriteDataProxy.NAME ) as SpriteDataProxy;			//widgetsStateProxy = cast(facade.retrieveProxy(WidgetsStateProxy.NAME), WidgetsStateProxy);            // Listen for events from the view component            // stage.addEventListener( MouseEvent.MOUSE_UP, onMouseUp );            //stage.addEventListener( MouseEvent.MOUSE_WHEEL, onMouseWheel );            //stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMove );            //stage.addEventListener(FullScreenEvent.FULL_SCREEN,onFullScreenChange);           //stage.addEventListener( Event.RESIZE, onScreenResize );        }		private function setContent(p:Hash<Dynamic>):Void {			//id,content	        var d = document.getElementById(p.get("id"));	        if( d == null ){	        		js.Lib.alert("Unknown element : "+p.get("id"));	    		}        		d.innerHTML = p.get("content");        }                override public function listNotificationInterests():Array<String>        {            return [ 					ApplicationFacade.SET_CONTENT                   ];        }        override public function handleNotification( note:INotification ):Void         {            switch ( note.getName() ) {                              case ApplicationFacade.SET_CONTENT:					setContent(cast(note.getBody(),Hash<Dynamic>));                                }        }		public function getVideoType():String {			if (supports_canvas()) { return "canvas"; }			return "image";		  /*if (!supports_video()) { return "image"; }		  //var v:Dynamic=js.Lib.document.createElement('video');		  var v:Dynamic=document.createElement('video');		  		  if (v.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"') == "probably"){		  	return "mp4";		  } else if (v.canPlayType('video/webm; codecs="vp8, vorbis"') == "probably"){		  	return "webm";		  } else {		  	//if (v.canPlayType('video/ogg; codecs="theora, vorbis"') == "probably")		  	return "ogg";		  }*/		}		/*public function supports_video():Bool {			//var v:Dynamic=js.Lib.document.createElement('video');		  var v:Dynamic=document.createElement('video');						return !!v.canPlayType;		}*/		public function supports_canvas():Bool {			//var v:Dynamic=js.Lib.document.createElement('video');		  var c:Dynamic=document.createElement('canvas');						return !!c.getContext;		}		        private function getDocument(){            return viewComponent;        }		public function addClass(target:String,theClass:String):Void{			new JQuery(target).addClass(theClass);		}		public function removeClass(target:String,theClass:String):Void{			new JQuery(target).removeClass(theClass);		}		public function hasClass(target:String,theClass:String):Bool{			return new JQuery(target).hasClass(theClass);		}		    }