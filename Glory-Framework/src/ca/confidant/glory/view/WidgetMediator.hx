package ca.confidant.glory.view;	//import flash.events.Event;	import JQuery;	//import js.Dom;	import org.puremvc.haxe.patterns.mediator.Mediator;	//import WidgetFramework;	import org.puremvc.haxe.interfaces.INotification;	import ca.confidant.glory.ApplicationFacade;	import ca.confidant.glory.model.LoaderProxy;	class WidgetMediator extends Mediator {		private var loaderProxy:LoaderProxy;		//private var theVideo:Dynamic;		private var type:String;		private var advancedMode:Bool;		private var showLink:Dynamic;//=new JQuery("#"+mediatorName+" .show");		private var hideLink:Dynamic;//=new JQuery("#"+mediatorName+" .hide");		private var config:haxe.xml.Fast;						public function new ( viewComponent:Hash<Dynamic>, type:String, adv:Bool ) {			super( viewComponent.get("idCode"), viewComponent );			//idCode stored as mediatorName			config = new haxe.xml.Fast(viewComponent.get("config"));						this.type=type;			this.advancedMode=adv;//are we showing the videos?			//trace(viewComponent.get("idCode")); 			//viewcomponent is a hash containing the original information			loaderProxy = cast(facade.retrieveProxy(LoaderProxy.NAME) , LoaderProxy);						initOverlays();			addListeners();			//setupCanvas();			initFeeds();			initOdometres();		}		private function initFeeds():Void{			///set up RSS			if(config.hasNode.feed) {								var myTicker:String='<div id="ticker_'+mediatorName+'" class="'+this.type+'">';				myTicker+='<div id="tickerContent_'+mediatorName+'">';								//get all feed items				var rawXML:Xml=Xml.parse(loaderProxy.getFeed(config.node.feed.att.id));				var fast = new haxe.xml.Fast(rawXML.firstElement());				myTicker+='<ul>';				var a:Array<String>=new Array();				if(fast.node.channel.hasNode.item){					//trace("getting items");					//var myList=fast.node.channel.nodes.item;					for(thisItem in fast.node.channel.nodes.item){						switch(this.type){							case "rss":								if((thisItem.node.link.innerData.length>0)&&(thisItem.node.title.innerData.length>0)){									a.push('<li><a target="_blank" href="'+thisItem.node.link.innerData+'"><strong>'+thisItem.node.title.innerData+'</strong><br />'+thisItem.node.description.innerData+'</a></li>');								} else if(thisItem.node.link.innerData.length>0){									a.push('<li><a target="_blank" href="'+thisItem.node.link.innerData+'">'+thisItem.node.description.innerData+'</a></li>');								}else{									a.push('<li><strong>'+thisItem.node.title.innerData+'</strong><br />'+thisItem.node.description.innerData+'</li>');								}							case "rss2":								if((thisItem.node.link.innerData.length>0)&&(thisItem.node.title.innerData.length>0)){									a.push('<li><h3><a target="_blank" href="'+thisItem.node.link.innerData+'">'+thisItem.node.title.innerData+'</a></h3>'+thisItem.node.description.innerData+'</li>');								} else if(thisItem.node.link.innerData.length>0){									a.push('<li><h3><a target="_blank" href="'+thisItem.node.link.innerData+'">'+thisItem.node.description.innerData+'</a></h3></li>');								}else{									a.push('<li><h3>'+thisItem.node.title.innerData+'</h3>'+thisItem.node.description.innerData+'</li>');								}						}																		//myTicker+='<li><strong>'+thisItem.node.title.innerData+'</strong><br />'+thisItem.node.description.innerData+'</li>';					}					if(config.node.feed.att.order=="random"){						//ArrayTools.shuffle(a);						//stole this from ArrayTools:						var n = a.length;						while(n > 1) {							var k = Std.random(n);							n--;							var temp = a[n];							a[n] = a[k];							a[k] = temp;						}											}										for(foo in a){						myTicker+=foo;					}				} else {					myTicker+='<li><strong>No new feeds</strong><br />at this time.</li>';					//trace("not getting items");				}				 				myTicker+='</ul></div></div>';				new JQuery(myTicker).appendTo("#"+mediatorName);								//o.addClass(positionClass);				var o:Dynamic=new JQuery('#tickerContent_'+mediatorName);				//var vis:Int=Std.parseInt(config.node.visible.innerData); 				//trace(config.node.visible.innerData);				if (this.type=="rss"){					o.jCarouselLite({  				         vertical: true,  				         visible: 1,  				         auto:4000,  				         speed:1000					});  				} else if(this.type=="rss2"){					o.jCarouselLite({  				         vertical: true,  				         visible: 2,  				         auto:4000,  				         speed:1000					});  				}				//o.jCarouselLite=callback(setupCarousel,Std.parseInt(config.node.visible.innerData));			}		}		/*private function setupCarousel(n:Int,r:JQuery){			trace("at least this works");		}*/		private function initOdometres():Void{			//var config = new haxe.xml.Fast(viewComponent.get("config"));						//set up odometre			if(config.hasNode.odometre && advancedMode==true) {				//trace("speed:"+config.node.odometre.att.speed);				var inc:Int=Std.parseInt(config.node.odometre.att.increment);				var oStart=config.node.odometre.att.start;				var oFinish=config.node.odometre.att.finish;				var positionClass=config.node.odometre.att.addClass;				var odo:String='<div id="'+mediatorName+'_counter" class="counter"></div>';				var o:Dynamic=new JQuery(odo).appendTo("#"+mediatorName);				o.odometer(				{				 counterStart : oStart,				 increment : inc,				 counterEnd : oFinish,				 delayTime : 0.01,				 speed : 10,				 numbersImage: 'js/odo/numbers.png',    				 backgroundImage: 'js/odo/background.png'				});				o.addClass(positionClass);			}		}		private function initOverlays():Void{									if(config.hasNode.note && advancedMode==true) {				for(thisNote in config.nodes.note){					var positionClass=thisNote.att.addClass;					var myString:String='<div class="note '+positionClass+'" id="'+mediatorName+'_note">'+thisNote.innerHTML+'</div>';					new JQuery(myString).appendTo("#"+mediatorName);				}			}			if(config.hasNode.overlay) {				for(thisOverlay in config.nodes.overlay){					var positionClass=thisOverlay.att.addClass;					if(thisOverlay.att.popup=="true") positionClass+=" popup";					var myString:String='<img alt="" class="'+positionClass+'" id="'+mediatorName+'_overlay" src="'+thisOverlay.att.src+'" width="'+thisOverlay.att.width+'" height="'+thisOverlay.att.height+'" />';					if(thisOverlay.has.href){						myString='<a target="_blank" class="'+positionClass+'" href="'+thisOverlay.att.href+'">'+myString+'</a>';					}										new JQuery(myString).appendTo("#"+mediatorName);				}			}			if(config.hasNode.hotSpot) {				var i:Int=0;				for(thisHotSpot in config.nodes.hotSpot){					var positionClass=thisHotSpot.att.addClass;					//if(thisHotSpot.att.popup=="true")positionClass+=" popup";										var myString:String;					if(thisHotSpot.att.action=="link") {						 myString='<a target="_blank" class="'+positionClass+' link" href="'+thisHotSpot.att.href+'" ><img alt="" src="images/transparent.png" /><span class="hidden">'+thisHotSpot.att.accessible+'</span></a>';					} else if(thisHotSpot.att.action=="showPopup"){						 myString='<a class="'+positionClass+' show" href="javascript:void(0)"><img alt="" src="images/transparent.png" /></a>';					}else {						//hide popup						 myString='<a class="'+positionClass+' hide" href="javascript:void(0)"><img alt="" src="images/transparent.png" /></a>';					}					var h:Dynamic=new JQuery(myString).appendTo("#"+mediatorName);					showLink=new JQuery("#"+mediatorName+" .show");					hideLink=new JQuery("#"+mediatorName+" .hide");										var r:String="#"+mediatorName;					new JQuery(r+" .hide").hide();					new JQuery(r+" .link").hide();										//untyped overlayjs__("alert('hi')");										//hideLink.addClass('hidden');					//var hs:Dynamic=new JQuery("#"+mediatorName+' .toggling');					//add the desired actions:					if(thisHotSpot.att.action=="showPopup"){						//showLink.click(function(){r.fadeIn();});						showLink.bind( 'wantShow',{t:r}, function(event){							//trace("onShowClick"+event.data.t);							new JQuery(event.data.t+" .popup").fadeIn("slow");							new JQuery(event.data.t+" .hide").fadeIn("slow");							new JQuery(event.data.t+" .link").fadeIn("slow");												} );						showLink.click(callback(onShowClick));//contains a trigger for show					} else if(thisHotSpot.att.action=="hidePopup"){						//hideLink.click(function(){r.fadeOut(); }); 						hideLink.bind( 'wantFade',{t:r}, function(event){							//trace("onHideClick"+event.data.t);							new JQuery(event.data.t+" .popup").fadeOut("slow");							new JQuery(event.data.t+" .hide").fadeOut("slow");							new JQuery(event.data.t+" .link").fadeOut("slow");												} );						hideLink.click(callback(onHideClick));//contains a trigger for fade					}					i++; 				}			}			if(config.hasNode.video) { //must be a youtube								for(thisVideo in config.nodes.video){										var myString:String='<iframe scrolling="no" class="youtube" type="text/html" src="http://www.youtube.com/embed/'+thisVideo.att.id+'?rel=0" frameborder="0"></iframe>';					var o:Dynamic=new JQuery(myString).appendTo("#"+mediatorName);										//o.load(callback(onYouTubeLoaded,"#"+mediatorName));									}											}		}		private function onHideClick(e):Void{			//var s:String="#"+mediatorName;						hideLink.trigger('wantFade', []);		}		private function onShowClick(e):Void{			//var s:String="#"+mediatorName;						showLink.trigger('wantShow', []);		}		private function addListeners():Void{			var theVideo:Dynamic=new JQuery("#"+mediatorName+"_video");			if(theVideo.length>0){ //did we find a video?				//theVideo.load();				theVideo.bind( "ended", onVideoEnded );				theVideo.bind( "canplay", onVideoCanplay );			}			//var v:Dynamic=js.Lib.document.getElementById(mediatorName+"_video");			//v.play();		}		/*private function setupCanvas():Void{			var theCanvas:Dynamic=new JQuery("#"+mediatorName+"_canvas");			if(theCanvas.length>0){ //did we find a video?				//untyped __js__('alert("found canvas")');				//var command:String='initSprite('+mediatorName+'_canvas,'+viewComponent.get("spriteSrc")+')';								untyped __js__('initSprites()');				var name = "functionName"; var args = [list, of, "args"]; untyped __js__("window[name].apply(this, args)");			}			//var v:Dynamic=js.Lib.document.getElementById(mediatorName+"_video");			//v.play();		}*/				private function onVideoEnded(e):Void{			//new JQuery("#"+mediatorName+" video").play();			var v:Dynamic=js.Lib.document.getElementById(mediatorName+"_video");			v.play();			//trace("ENDED");		}		private function manualStart():Void{			//new JQuery("#"+mediatorName+" video").play();			//trace(viewComponent.get("idCode")); 						//this is hanging:			var v:Dynamic=js.Lib.document.getElementById(mediatorName+"_video");			v.play();		}		private function onVideoCanplay(e):Void{			//new JQuery("#"+mediatorName+" video").play();			var theVideo:Dynamic=new JQuery("#"+mediatorName+"_video");			theVideo.unbind( "canplay", onVideoCanplay );						var v:Dynamic=js.Lib.document.getElementById(mediatorName+"_video");						v.play();			//trace("ENDED");		}		override public function listNotificationInterests():Array<String> {			return [ ApplicationFacade.PLAY_ALL_VIDEOS ];					}				override public function handleNotification( note:INotification ):Void {			switch ( note.getName() ) {				case ApplicationFacade.PLAY_ALL_VIDEOS:					manualStart();								}		}		//loadWidgets();		private function init(xmlPath:String):Void {					}		private function widget():Dynamic {			var widget = new JQuery("#"+mediatorName);						return widget;		}	}